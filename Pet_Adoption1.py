# -*- coding: utf-8 -*-
"""Untitled

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FC-zuwr6_TWT13uI_OPNJmWSLc1I1GKj

# Importing Libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from sklearn.preprocessing import StandardScaler, normalize
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA

"""# Data Frame Read - First"""

path = "/train.csv"

dataset = pd.read_csv(path)
dataset.head()

"""# Second"""

test = pd.read_csv("/test.csv")
test.head()

"""# Third"""

df = pd.DataFrame()

#dataset['issue_date'] = pd.to_datetime(dataset['issue_date'], format='%Y%m%d-%H%M%S')

"""# Data Frame Editing - first"""

dataset.isnull().sum()

dataset.loc[(dataset['condition'].isnull() == True), 'condition'] = dataset['condition'].mean()

dataset.drop('issue_date',axis = 1,inplace = True)
dataset.drop('listing_date',axis = 1,inplace = True)
dataset.drop('pet_id',axis = 1,inplace = True)

from sklearn.preprocessing import LabelEncoder
labelencoder = LabelEncoder()
dataset['color_type'] = labelencoder.fit_transform(dataset['color_type'])

"""# Second"""

test.isnull().sum()

test.loc[(test['condition'].isnull() == True), 'condition'] = test['condition'].mean()

test.drop('issue_date',axis = 1,inplace = True)
test.drop('listing_date',axis = 1,inplace = True)
x = test['pet_id']
test.drop('pet_id',axis = 1,inplace = True)
test['color_type'] = labelencoder.fit_transform(test['color_type'])

"""# Classifier 1"""

X = dataset.iloc[:, :-2].values
y = dataset.iloc[:,6:7].values
print(y)

X = dataset.iloc[:, :-2].values
y = dataset.iloc[:,6:7].values
print(y)
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.10)
from sklearn.ensemble import RandomForestClassifier
classifier1 = RandomForestClassifier(n_estimators = 50)
classifier1.fit(X_train, y_train)


y_pred = classifier1.predict(X_test)
y_pred

from sklearn.metrics import accuracy_score
score = accuracy_score(y_test,y_pred)
print(score)

a = classifier1.predict(test)
print(a)

dataset.head()

"""# Classifier 2"""

X = dataset.iloc[:, :-2].values
y = dataset.iloc[:,7:].values
print(y)
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.10)
from sklearn.ensemble import RandomForestClassifier
classifier2 = RandomForestClassifier(n_estimators = 50)
classifier2.fit(X_train, y_train)


y_pred = classifier2.predict(X_test)
y_pred

from sklearn.metrics import accuracy_score
score = accuracy_score(y_test,y_pred)
print(score)

a2 = classifier2.predict(test)
print(a2)

"""Priting Result

# Third
"""

df['pet_id'] = x
df["breed_category"] = a
df.head()

df["pet_category"] = a2
df.head()

df.to_csv("/test5.csv",index = False)

aa = pd.read_csv("/test5.csv")
aa.head()

df.head()

from google.colab import drive
drive.mount('/content/drive')

"""# KMEANS"""

scaler = StandardScaler()
dataset_scaled = scaler.fit_transform(dataset)
value_1 = []
for i in range(1,20):
  kmeans = KMeans(n_clusters = i) 
  kmeans.fit(dataset_scaled)
  value_1.append(kmeans.inertia_) 
  plt.plot(value_1,'bx-')

kmeans = KMeans(4)
#k = 3
kmeans.fit(dataset_scaled)
labels = kmeans.labels_
kmeans.cluster_centers_.shape
cluster_centers = pd.DataFrame(data = kmeans.cluster_centers_, columns = [dataset.columns])
cluster_centers = scaler.inverse_transform(cluster_centers)
cluster_centers = pd.DataFrame(data = cluster_centers, columns = [dataset.columns])
print(cluster_centers)

values = kmeans.fit_predict(test)
print(values)

df["pet_category"] = values

df.head(10)

df.to_csv("/test7.csv",index = False)

aa = pd.read_csv("/test7.csv")
aa.head()